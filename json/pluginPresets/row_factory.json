{"composition": {"camera_position": "camera_pos","camera_rotation": "camera_rotation","camera_target": "camera_target","camera_zoom": "camera_zoom","compResolution": "compResolution","frame_rate": "fps","layerPosition": "layerPosition","layerScale": "layerScale","resolution": "resolution","time_frame": "timef","time_sec": "time"},"effectInfo": {"description": "based on  http://glslsandbox.com/e#52724.0\\nGenerates a row with light on the side.","effectName": "tlMath","minimalPluginVersion": 115,"pluginVersion": 115,"presetName": "row","tags": ["glsl","glslsandbox"," row"," "," light"," generator"]},"effectMode": {"evalModeB": false,"expr_modeB": false,"gl33_modeB": true},"flags": {"pixelsCallExternalInputB": [false,false,false,false],"presetHasWideInputB": true,"usesCameraB": false},"gl_expression": {"gl33_frag_error": "compiled successfully","gl33_frag_sh": "//based on glslsandbox.com http://glslsandbox.com/e#52724.0\\n#version 330\\n\\nuniform vec3 light_color;\\nuniform vec3 color_bg;\\nuniform float speed;\\nin vec4 out_pos;\\nin vec2 out_uvs;\\nout vec4 colourOut;\\nuniform float time;\\nuniform vec2 resolution;\\nuniform float pi_offset;\\nuniform float iterations;\\n\\n\\nfloat PI  = 3.141592653589793*pi_offset/10;\\n\\n\\n#define saturate(x) clamp(x,0.,1.)\\n\\nfloat tri(float x){return abs(2.*fract(x*.5-.25)-1.)*2.-1.;}\\nfloat sqr(float x){return -2.*(step(.5,fract(x*.5))-.5);}\\nfloat circuit(float x){return clamp(tri(x*4.)*.25,(sqr(x)-1.)*.5,(sqr(x+.5)+1.)*.5);}\\nfloat circuit2(float x){return clamp(tri(x*.5)*.5,0.,.25);}\\nfloat flow(float x,float d){return (1.+sin(x+d*time*5.+3.))*.3+.3;}\\nvec2 pp(vec2 p){float r=.5/p.y;return vec2(p.x*r, r);}\\n\\n\\nvoid main(void){\\n float t=floor(time * 0.8 *30.)/15.;\\n vec2 p =( gl_FragCoord.xy -  resolution.xy*.5 ) / resolution.x;\\n vec2 p2 = p;\\n vec3 color;\\n\\n float k = mix(fract(-p.y), 1.0, step(0., -p.y));\\n if (p.y > 10.0) {\\n } else {\\n     float l=0.,d=sign(p.y);\\n     vec2 r = p;\\n     vec2 q = p;\\n     q=pp(q);\\n     float n = floor(q.x/.5);\\n     q.x=mod(q.x,.5)-.25;\\n     p=pp(p);\\n     l+=step(abs(q.x+circuit(q.y+sign(p.y)*t+n)),.005);\\n     l+=pow(.001/abs(p.x+circuit(p.y+d*t)),flow(p.y,d));\\n     l+=pow(.001/abs(p.x+.75+circuit2(p.y+d*t)),(1.+sin(p.y+d*time*5.))*.3+.3);\\n     l+=pow(.001/abs(p.x-.75+circuit2(p.y+d*t)),(1.+sin(p.y+d*time*5.))*.3+.3);\\n     l=saturate(l);\\n     l*=abs(r.y*2.);\\n     l*=abs(sin(r.y*200.+sign(p.y)*time*5.))*.5+.5;\\n     l+=pow(.001/abs(p.x+circuit(p.x+d*time)),(1.+sin(p.x+d*time*5.+3.))*.3+.3);\\n     color = color_bg;\\n     color *= k;\\n }\\n \\n     float angle = atan(p2.y,p2.x)/(2.*PI);\\n    angle -= floor(angle);\\n    float rad = length(p2);\\n    \\n    float c = 0.1;\\n    float brightness = 0.012;\\n\\n    \\n    for (int i = 0; i < int (iterations); ++i){\\n    float angleRnd = floor(angle*14.)+1.;\\n    float angleRnd1 = fract(angleRnd*fract(angleRnd*.7235)*45.1);\\n    float angleRnd2 = fract(angleRnd*fract(angleRnd*.82657)*13.724);\\n    float t = t*speed + angleRnd1*10.;\\n    float radDist = sqrt(angleRnd2+float(i));\\n    \\n    float adist = radDist/rad*.1;\\n    float dist = (t*.1+adist);\\n    dist = abs(fract(dist)-.5);\\n    c +=  (1.0 / (dist))*cos(0.7*(sin(t)))*adist/radDist * brightness;\\n    }\\n\\ncolourOut = vec4(color + vec3(c) * light_color, 1.0);\\n}","gl33_vert_error": "compiled successfully","gl33_vert_sh": "#version 330 \\n in vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}"},"gui_settings": {"cboxGrp": {"grpName": "check box Group","grpVisibleB": false,"params": [{"defaultVal": [0],"name": "cbox_1","visibleB": false},{"defaultVal": [0],"name": "cbox_2","visibleB": false},{"defaultVal": [0],"name": "cbox_3","visibleB": false},{"defaultVal": [0],"name": "cbox_4","visibleB": false},{"defaultVal": [0],"name": "cbox_5","visibleB": false},{"defaultVal": [0],"name": "cbox_6","visibleB": false},{"defaultVal": [0],"name": "cbox_7","visibleB": false},{"defaultVal": [0],"name": "cbox_8","visibleB": false},{"defaultVal": [0],"name": "cbox_9","visibleB": false},{"defaultVal": [0],"name": "cbox_10","visibleB": false}]},"colorGrp": {"grpName": "3d color Group","grpVisibleB": true,"params": [{"defaultVal": [0.8,0.1,0.1],"name": "light_color","visibleB": true},{"defaultVal": [0,0,0],"name": "color_bg","visibleB": true},{"defaultVal": [1,1,1],"name": "color_3","visibleB": false},{"defaultVal": [1,1,1],"name": "color_4","visibleB": false},{"defaultVal": [1,1,1],"name": "color_5","visibleB": false},{"defaultVal": [1,1,1],"name": "color_6","visibleB": false},{"defaultVal": [1,1,1],"name": "color_7","visibleB": false},{"defaultVal": [1,1,1],"name": "color_8","visibleB": false},{"defaultVal": [1,1,1],"name": "color_9","visibleB": false},{"defaultVal": [1,1,1],"name": "color_10","visibleB": false}]},"layerGrp": {"current_layer": {"name": "texture0"},"extLayer_1": {"name": "texture1","visibleB": false},"extLayer_2": {"name": "texture2","visibleB": false},"extLayer_3": {"name": "texture3","visibleB": false},"extLayer_4": {"name": "texture4","visibleB": false},"grpName": "Layer Group","grpVisibleB": false},"pointGrp": {"grpName": "3d Point Group","grpVisibleB": false,"params": [{"defaultVal": [50,50,50],"name": "center","visibleB": false},{"defaultVal": [50,50,50],"name": "point_2","visibleB": false},{"defaultVal": [50,50,50],"name": "point_3","visibleB": false},{"defaultVal": [50,50,50],"name": "point_4","visibleB": false},{"defaultVal": [50,50,50],"name": "point_5","visibleB": false},{"defaultVal": [50,50,50],"name": "point_6","visibleB": false},{"defaultVal": [50,50,50],"name": "point_7","visibleB": false},{"defaultVal": [50,50,50],"name": "point_8","visibleB": false},{"defaultVal": [50,50,50],"name": "point_9","visibleB": false},{"defaultVal": [50,50,50],"name": "point_10","visibleB": false}]},"rotationGrp": {"grpName": "rotation Group","grpVisibleB": false,"params": [{"defaultVal": [0],"name": "rotation_1","visibleB": false},{"defaultVal": [0],"name": "rotation_2","visibleB": false},{"defaultVal": [0],"name": "rotation_3","visibleB": false},{"defaultVal": [0],"name": "rotation_4","visibleB": false},{"defaultVal": [0],"name": "rotation_5","visibleB": false},{"defaultVal": [0],"name": "rotation_6","visibleB": false},{"defaultVal": [0],"name": "rotation_7","visibleB": false},{"defaultVal": [0],"name": "rotation_8","visibleB": false},{"defaultVal": [0],"name": "rotation_9","visibleB": false},{"defaultVal": [0],"name": "rotation_10","visibleB": false}]},"sliderGrp": {"grpName": "Slider Group","grpVisibleB": true,"params": [{"defaultVal": [1],"name": "speed","visibleB": true},{"defaultVal": [10],"name": "pi_offset","visibleB": true},{"defaultVal": [1],"name": "iterations","visibleB": true},{"defaultVal": [0],"name": "slider_4","visibleB": false},{"defaultVal": [0],"name": "slider_5","visibleB": false},{"defaultVal": [0],"name": "slider_6","visibleB": false},{"defaultVal": [0],"name": "slider_7","visibleB": false},{"defaultVal": [0],"name": "slider_8","visibleB": false},{"defaultVal": [0],"name": "slider_9","visibleB": false},{"defaultVal": [0],"name": "slider_10","visibleB": false}]}},"math_expression": {"alphaExpr": "return inChannel;","alpha_error": "compiled successfully","blueExpr": "return inChannel;","blue_error": "compiled successfully","commonExpr": "float getLuma(vec4 text)\\n {\\n return 0.3 * text.r + 0.59 * text.g + 0.11 * text.b; \\n}\\nvec4 textureOffset(sampler2D tex2d, vec2 off) {\\nvec2 uv_AE = out_uvs;\\nuv_AE.x =textUvs.x + off.x; \\nuv_AE.y = textUvs.y + off.y; \\nvec4 textureIn = texture(tex2d, uv_AE); \\n return  textureIn; \\n}","common_error": "compiled successfully","exprRGBModeB": true,"expr_current_channel": "inChannel","expr_pix": "pix","expr_rgb_channel": "inputRgb","greenExpr": "return inChannel;","green_error": "compiled successfully","redExpr": "return inChannel;","red_error": "compiled successfully","rgbExpr": "    vec3 result;\\n    //in this mode the channel0 texture is automatically a rgb channel\\n    vec3 premix =mix (inputRgb,color_1, slider_1/100); //let's make a simple mix with color 1 influence by a slider\\n    //note we wrote vec4(color_1, 1.0). becaufe we have to mix a four color channel so we add a full alpha\\n    if (cbox_1){ // if the checkbox is activated\\n        // we import the layer1 ith an offset ith point1.\\n        \\n        // an offset has to be nromalized: (1,1) =(the layer x size normalized, the layer y scale normalized)\\n        // so an offset to stay in the picture has to be defined wetween 0 and 1\\n        // lets start with resolution/2 get the center. (for ex in fullhd wi get center (960/540)\\n        //if we substract the point coord we get the off value\\n        // 0 if the point is in the center. to get a normalized value to the layer we divide by the resoluton \\n        vec2 off;\\n        //gl_FragCoord returns the coordonate of the current pixel.\\n        off.x =textUvs.x +( resolution.x/2 -point_1.x)/resolution.x;\\n        off.y =textUvs.y -( resolution.y/2 -point_1.y)/resolution.y;\\n        vec4 textureLayer = texture (texture1,off );\\n        result = mix (inputRgb,textureLayer.rgb, slider_1/100); //let's do some mix with a slider\\n    }else{\\n         result =premix; // if checkbox not selected return premix\\n\\n    }\\n    return result;","rgb_error": "compiled successfully"}}