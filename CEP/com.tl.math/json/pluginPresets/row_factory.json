{

"composition": {


"camera_position": "camera_pos",


"camera_rotation": "camera_rotation",


"camera_target": "camera_target",


"camera_zoom": "camera_zoom",


"compResolution": "compResolution",


"frame_rate": "fps",


"layerPosition": "layerPosition",


"layerScale": "layerScale",


"resolution": "resolution",


"time_frame": "timef",


"time_sec": "time"

},

"effectInfo": {


"description": "based on http://glslsandbox.com/e#57951.4\\n\\ngenerates rows, with customizable  iteration in each axis, position and color. A fog on the top can be set.",


"effectName": "tlMath",


"minimalPluginVersion": 115,


"pluginVersion": 115,


"presetName": "row factory",


"tags": [



"row",



" light",



" iteration",



" kaleidoscope"


]

},

"effectMode": {


"evalModeB": false,


"expr_modeB": true,


"gl33_modeB": false

},

"flags": {


"pixelsCallExternalInputB": [



false,



false,



false,



false


],


"presetHasWideInputB": false,


"usesCameraB": false

},

"gl_expression": {


"gl33_frag_error": "compiled successfully",


"gl33_frag_sh": "#version 330 // glsls version for opengl 3.3\\n\\nuniform vec3 color;\\nuniform vec3 fog;\\nuniform vec3 position;\\nuniform float scale_x;\\nuniform float scale_y;\\nuniform float scale_z;\\nuniform float iterations;\\nuniform float iterations_x;\\nuniform float iterations_y;\\nuniform float iterations_z;\\nuniform float  offset_z;\\nuniform vec2 resolution;\\nuniform float light_intensity;\\nuniform float  glow;\\nin vec4 out_pos;\\nin vec2 out_uvs;\\nout vec4 fragColorOut;\\n\\n\\n\\nvoid main(void)\\n{\\n   \\tvec2 uv = (2. * gl_FragCoord.xy - resolution) / resolution.y;\\n\\tvec3 col = vec3(0.);\\n\\t\\n\\tvec3 p = vec3(0);\\n\\tvec3 ro = position;\\n\\tro.z += offset_z;\\n\\tvec3 rd = vec3(uv, 1)*vec3(scale_x,scale_y, scale_z);\\n\\tfloat t = 0.;\\n\\tfor (int i = 0; i < int (iterations); i++) {\\n\\t\\tp = ro + rd * t*vec3(iterations_x/10, iterations_y/10, iterations_z/10);\\n\\t\\tfloat z = p.z;\\n\\t\\tp = mod(p, 4.) - 2;\\n\\t\\tt += .5* min(min(length(p.xy) - .8 - .1 * cos(z * .2 ), length(p.yz) - .1), length(p.xz) - .1);\\n\\t}\\n\\t\\t\\t\\n\\t// little code to make fog\\n\\tfloat f = 1. - exp(-t * light_intensity/100); // smooth transition and plateu from 0 - 1\\n\\tfloat s = max(dot(rd, vec3(0, 0.6, 0)), 0.); // is the camera (rd) looking at the light / sun \\n\\tcol = mix(col, mix(color,fog, s), f*glow/10); // mix the main color with the scene color based on fog amt\\n\\t\\n\\tfragColorOut =vec4(col, 1.);\\n}",


"gl33_vert_error": "compiled successfully",


"gl33_vert_sh": "#version 330 \\n in vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}"

},

"gui_settings": {


"cboxGrp": {



"grpName": "check box Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






0





],





"name": "cbox_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_10",





"visibleB": false




}



]


},


"colorGrp": {



"grpName": "colors",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






0.8,






0.4,






0.2





],





"name": "color",





"visibleB": true




},




{





"defaultVal": [






0.5,






0.5,






0.5





],





"name": "fog",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_3",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_4",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_5",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_6",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_7",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_8",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_9",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_10",





"visibleB": false




}



]


},


"layerGrp": {



"current_layer": {




"name": "texture0"



},



"extLayer_1": {




"name": "texture1",




"visibleB": false



},



"extLayer_2": {




"name": "texture2",




"visibleB": false



},



"extLayer_3": {




"name": "texture3",




"visibleB": false



},



"extLayer_4": {




"name": "texture4",




"visibleB": false



},



"grpName": "Layer Group",



"grpVisibleB": false


},


"pointGrp": {



"grpName": "points",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






50,






50,






50





],





"name": "position",





"visibleB": true




},




{





"defaultVal": [






50,






50,






50





],





"name": "orientation",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_3",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_4",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_5",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_6",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_7",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_8",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_9",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_10",





"visibleB": false




}



]


},


"rotationGrp": {



"grpName": "rotation Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






0





],





"name": "rotation_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_10",





"visibleB": false




}



]


},


"sliderGrp": {



"grpName": "row settings",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






0





],





"name": "offset_z",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "glow",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "light_intensity",





"visibleB": true




},




{





"defaultVal": [






50





],





"name": "iterations",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "iterations_x",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "iterations_y",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "iterations_z",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "scale_x",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "scale_y",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "scale_z",





"visibleB": true




}



]


}

},

"math_expression": {


"alphaExpr": "return inChannel;",


"alpha_error": "compiled successfully",


"blueExpr": "return inChannel;",


"blue_error": " compiled successfully",


"commonExpr":  "float getLuma(vec4 text)\\n {\\n return 0.3 * text.r + 0.59 * text.g + 0.11 * text.b; \\n}\\nvec4 textureOffset(sampler2D tex2d, vec2 off) {\\nvec2 uv_AE = out_uvs;\\nuv_AE.x =textUvs.x + off.x; \\nuv_AE.y = textUvs.y + off.y; \\nvec4 textureIn = texture(tex2d, uv_AE); \\n return  textureIn; \\n}",


"common_error": "compiled successfully",


"exprRGBModeB": true,


"expr_rgb_channel":"inputRgb",


"expr_current_channel": "inChannel",


"expr_pix": "pix",


"greenExpr": "return inChannel;",


"green_error": "compiled successfully",


"redExpr": "return inChannel;",


"red_error": "compiled successfully",


"rgbExpr": "vec2 uv = (2. * gl_FragCoord.xy - resolution) / resolution.y;\\nvec3 col = vec3(0.);\\n\\nvec3 p = vec3(0);\\nvec3 ro = position;\\nro.z += offset_z;\\nvec3 rd = vec3(uv, 1)*vec3(scale_x,scale_y, scale_z);\\nfloat t = 0.;\\nfor (int i = 0; i < int (iterations); i++) {\\n\\tp = ro + rd * t*vec3(iterations_x/10, iterations_y/10, iterations_z/10);\\n\\tfloat z = p.z;\\n\\tp = mod(p, 4.) - 2;\\n\\tt += .5* min(min(length(p.xy) - .8 - .1 * cos(z * .2 ), length(p.yz) - .1), length(p.xz) - .1);\\n}\\n\\t\\t\\n// little code to make fog\\nfloat f = 1. - exp(-t * light_intensity/100); // smooth transition and plateu from 0 - 1\\nfloat s = max(dot(rd, vec3(0, 0.6, 0)), 0.); // is the camera (rd) looking at the light / sun \\ncol = mix(col, mix(color,fog, s), f*glow/10); // mix the main color with the scene color based on fog amt\\n\\nreturn col;",


"rgb_error": "compiled successfully"

}
}