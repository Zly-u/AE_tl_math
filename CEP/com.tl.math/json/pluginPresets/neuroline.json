{

"composition": {


"camera_position": "camera_pos",


"camera_rotation": "camera_rotation",


"camera_target": "camera_target",


"camera_zoom": "camera_zoom",


"compResolution": "compResolution",


"frame_rate": "fps",


"layerPosition": "layerPosition",


"layerScale": "layerScale",


"resolution": "resolution",


"time_frame": "timef",


"time_sec": "time"

},

"effectInfo": {


"description": "a work in progress shader to generate illustration of neuronal networks",


"effectName": "tlMath",


"minimalPluginVersion": 115,


"pluginVersion": 115,


"presetName": "neurolines_wip",


"tags": [



"neurolines",



" experiment",



" wip"


]

},

"effectMode": {


"evalModeB": false,


"expr_modeB": false,


"gl33_modeB": true

},

"flags": {


"needsLumaB": false,


"pixelsCallExternalInputB": [



false,



false,



false,



false


],


"presetHasWideInputB": true,


"usesCameraB": false

},

"gl_expression": {


"gl33_frag_error": "compiled successfully",


"gl33_frag_sh": "#version 330\\n\\nuniform float layers;\\nuniform float line_length;\\nuniform float line_bg_size;\\nuniform float time;\\n\\nuniform vec2 resolution;\\nuniform float zoom;\\nuniform vec3 center;\\nuniform vec3 color;\\nuniform float evolution;\\nuniform float dot_size;\\nuniform bool use_time;\\n\\nuniform float rotation;\\n\\nin vec4 out_pos;\\nin vec2 out_uvs;\\nout vec4 colourOut;\\n\\nvec2 iMouse = center.xy;\\n\\n\\n#define S(a, b, t) smoothstep(a, b, t)\\n\\n\\nfloat N21(vec2 p) {\\n    vec3 a = fract(vec3(p.xyx) * vec3(213.897, 653.453, 253.098));\\n    a += dot(a, a.yzx + 79.76);\\n    return fract((a.x + a.y) * a.z);\\n}\\n\\nvec2 GetPos(vec2 id, vec2 offs, float t) {\\n    float n = N21(id+offs);\\n    float n1 = fract(n*10.);\\n    float n2 = fract(n*100.);\\n    float a = t+n;\\n    return offs + vec2(sin(a*n1), cos(a*n2))*.4;\\n}\\n\\nfloat GetT(vec2 ro, vec2 rd, vec2 p) {\\n    return dot(p-ro, rd); \\n}\\n\\nfloat LineDist(vec3 a, vec3 b, vec3 p) {\\n    return length(cross(b-a, p-a))/length(p-a);\\n}\\n\\nfloat df_line( in vec2 a, in vec2 b, in vec2 p)\\n{\\n    vec2 pa = p - a, ba = b - a;\\n    float h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);    \\n    return length(pa - ba * h);\\n}\\n\\nfloat line(vec2 a, vec2 b, vec2 uv) {\\n    float r1 = line_length/1000;\\n    float r2 = r1*line_bg_size/100;\\n    \\n    float d = df_line(a, b, uv);\\n    float d2 = length(a-b);\\n    float fade = S(1.5, .5, d2);\\n    \\n    fade += S(.05, .02, abs(d2-.75));\\n    return S(r1, r2, d)*fade;\\n}\\n\\nfloat NetLayer(vec2 st, float n, float t) {\\n    vec2 id = floor(st)+n;\\n\\n    st = fract(st)-.5;\\n   \\n    vec2 p[9];\\n    int i=0;\\n    for(float y=-1.; y<=1.; y++) {\\n        for(float x=-1.; x<=1.; x++) {\\n            p[i++] = GetPos(id, vec2(x,y), t);\\n        }\\n    }\\n    \\n    float m = 0.;\\n    float sparkle = 0.;\\n    \\n    for(int i=0; i<9; i++) {\\n        m += line(p[4], p[i], st);\\n\\n        float d = length(st-p[i]);\\n\\n        float s = (dot_size*0.001/(d*d));\\n        s *= S(1., .7, d);\\n        float pulse = sin((fract(p[i].x)+fract(p[i].y)+t)*5.)*.4+.6;\\n        pulse = pow(pulse, 20.);\\n\\n        s *= pulse;\\n        sparkle += s;\\n    }\\n    \\n    m += line(p[1], p[3], st);\\n    m += line(p[1], p[5], st);\\n    m += line(p[7], p[5], st);\\n    m += line(p[7], p[3], st);\\n    \\n    float sPhase = (sin(t+n)+sin(t*.1))*.25+.5;\\n    sPhase += pow(sin(t*.1)*.5+.5, 50.)*5.;\\n    m += sparkle*sPhase;//(*.5+.5);\\n    \\n    return m;\\n}\\n\\nvoid main()\\n{\\n    vec2 uv =( gl_FragCoord.xy-resolution.xy*.5)/resolution.y;\\n    vec2 M = iMouse.xy/resolution.xy-.5;\\n    float layertime = 0.;\\n    if (use_time){\\n        layertime = time;\\n    }\\n    float t =(layertime+ evolution)*.1;\\n    float c = cos (t);\\n     float s = sin (t+rotation);\\n    mat2 rot = mat2(c, -s, s, c);\\n    vec2 st = uv*rot;  \\n    M *= rot*2.;\\n    \\n    float m = 0.;\\n    for(float i=0.; i<1.; i+=1./layers) {\\n        float z = fract(t+i);\\n        float size = mix(100/zoom, 1., z);\\n        float fade = S(0., .6, z)*S(1., .8, z);\\n        \\n        m += fade * NetLayer(st*size-M*z, i, evolution);\\n    }\\n     \\n    float fft  = 0.;\\n    float glow = -uv.y*fft*2.;\\n   \\n    vec3 baseCol = color;\\n    vec3 col = baseCol*m;\\n    col += baseCol*glow;\\n    \\n\\n    col *= 1.-dot(uv,uv);\\n    t = mod(evolution, 230.);\\n    col *= S(0., 20., t)*S(224., 200., t);\\n\\n   colourOut= vec4(col,1);\\n}",


"gl33_vert_error": "compiled successfully",


"gl33_vert_sh": "#version 330 \\n in vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}"

},

"gui_settings": {


"cboxGrp": {



"grpName": "check box Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






0





],





"name": "use_time",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_10",





"visibleB": false




}



]


},


"colorGrp": {



"grpName": "3d color Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






1,






1,






1





],





"name": "color",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_2",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_3",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_4",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_5",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_6",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_7",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_8",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_9",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_10",





"visibleB": false




}



]


},


"layerGrp": {



"current_layer": {




"name": "texture0"



},



"extLayer_1": {




"name": "texture1",




"poffName": "layer1_position_off",




"toffName": "layer1_time_off",




"visibleB": false



},



"extLayer_2": {




"name": "texture2",




"poffName": "layer2_position_off",




"toffName": "layer2_time_off",




"visibleB": false



},



"extLayer_3": {




"name": "texture3",




"poffName": "layer3_position_off",




"toffName": "layer3_time_off",




"visibleB": false



},



"extLayer_4": {




"name": "texture4",




"poffName": "layer4_position_off",




"toffName": "layer4_time_off",




"visibleB": false



},



"grpName": "Layer Group",



"grpVisibleB": false


},


"pointGrp": {



"grpName": "3d Point Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






50,






50,






50





],





"name": "center",





"visibleB": true




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_2",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_3",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_4",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_5",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_6",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_7",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_8",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_9",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_10",





"visibleB": false




}



]


},


"rotationGrp": {



"grpName": "rotation Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






0





],





"name": "rotation",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "rotation_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_10",





"visibleB": false




}



]


},


"sliderGrp": {



"grpName": "Slider Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






10





],





"name": "layers",





"visibleB": true




},




{





"defaultVal": [






30





],





"name": "line_length",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "line_bg_size",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "evolution",





"visibleB": true




},




{





"defaultVal": [






30





],





"name": "zoom",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "dot_size",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "slider_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_8",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "slider_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_10",





"visibleB": false




}



]


}

},

"math_expression": {


"alphaExpr": "return inChannel;",


"alpha_error": "compiled successfully",


"blueExpr": "return inChannel;",


"blue_error": " compiled successfully",


"commonExpr": "float getLuma(vec4 text)\\n {\\n return 0.3 * text.r + 0.59 * text.g + 0.11 * text.b; \\n}\\nvec4 textureOffset(sampler2D tex2d, vec2 off) {\\nvec2 uv_AE = out_uvs;\\nuv_AE.x =textUvs.x + off.x; \\nuv_AE.y = textUvs.y + off.y; \\nvec4 textureIn = texture(tex2d, uv_AE); \\n return  textureIn; \\n}",


"common_error": "compiled successfully",


"exprRGBModeB": true,


"expr_current_channel": "inChannel",


"expr_pix": "pix",


"expr_rgb_channel": "inputRgb",


"greenExpr": "return inChannel;",


"green_error": "compiled successfully",


"redExpr": "return inChannel;",


"red_error": "compiled successfully",


"rgbExpr": "    vec3 result;\\n    //in this mode the channel0 texture is automatically a rgb channel\\n    vec3 premix =mix (inputRgb,color_1, slider_1/100); //let's make a simple mix with color 1 influence by a slider\\n    //note we wrote vec4(color_1, 1.0). becaufe we have to mix a four color channel so we add a full alpha\\n    if (cbox_1){ // if the checkbox is activated\\n        // we import the layer1 ith an offset ith point1.\\n        \\n        // an offset has to be nromalized: (1,1) =(the layer x size normalized, the layer y scale normalized)\\n        // so an offset to stay in the picture has to be defined wetween 0 and 1\\n        // lets start with resolution/2 get the center. (for ex in fullhd wi get center (960/540)\\n        //if we substract the point coord we get the off value\\n        // 0 if the point is in the center. to get a normalized value to the layer we divide by the resoluton \\n        vec2 off;\\n        //gl_FragCoord returns the coordonate of the current pixel.\\n        off.x =textUvs.x +( resolution.x/2 -point_1.x)/resolution.x;\\n        off.y =textUvs.y -( resolution.y/2 -point_1.y)/resolution.y;\\n        vec4 textureLayer = texture (texture1,off );\\n        result = mix (inputRgb,textureLayer.rgb, slider_1/100); //let's do some mix with a slider\\n    }else{\\n         result =premix; // if checkbox not selected return premix\\n\\n    }\\n    return result;",


"rgb_error": "compiled successfully"

}
}