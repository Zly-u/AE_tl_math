{"composition": {"camera_position": "camera_pos","camera_rotation": "camera_rotation","camera_target": "camera_target","camera_zoom": "camera_zoom","compResolution": "compResolution","frame_rate": "fps","layerPosition": "layerPosition","layerScale": "layerScale","resolution": "resolution","time_frame": "timef","time_sec": "time"},"effectInfo": {"description": "based on a shadertoy Created by inigo quilez - iq/2013\\nhttps://www.shadertoy.com/view/XslGRr\\nLicensCC Attribution-NonCommercial-ShareAlike 3.0 Unported License.\\nGenerate a cloud world \\nparam: speed of the clouds\\n\\n\\n","effectName": "tlMath","minimalPluginVersion": 115,"pluginVersion": 115,"presetName": "cloud generator","tags": ["glsl"," cloud"," generator"," shadertoy"]},"effectMode": {"evalModeB": false,"expr_modeB": false,"gl33_modeB": true},"flags": {"pixelsCallExternalInputB": [false,false,false,false],"presetHasWideInputB": true,"usesCameraB": false},"gl_expression": {"gl33_frag_error": "compiled successfully","gl33_frag_sh": "#version 330 // glsls version for opengl 3.3\\n\\nin vec4 out_pos;\\nin vec2 out_uvs;\\n\\nuniform float time;\\nuniform vec2 resolution;\\nuniform vec3 position;\\nuniform float speed;\\nuniform float depth;\\nuniform float depth_opacity ;\\n\\n\\nuniform vec3 sun_direction;\\n\\nuniform vec3 cloud_light;\\nuniform vec3 cloud_color;\\n\\nuniform float height;\\n\\nout vec4 fragColorOut;\\n\\nvec2 paramPos = position.xy/resolution.xy;\\n\\n#define pi 3.1415926535897932384624433832795\\n// end Action camera \\n\\n// hash based 3d value noise\\nfloat hash( float n )\\n{\\n    return fract(sin(n)*43758.5453);\\n}\\n\\nfloat noise( in vec3 x )\\n{\\n    vec3 p = floor(x);\\n    vec3 f = fract(x);\\n    f = f*f*(3.0-2.0*f);\\n    float n = p.x + p.y*57.0 + 113.0*p.z;\\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\\n           mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\\n           mix(mix( hash(n+113.0), hash(n+114.0),f.x),\\n           mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\\n}\\n\\n\\nvec4 map( in vec3 p )\\n{\\n\\tfloat d = 0.2 - p.y;\\n\\n\\tvec3 q = p - vec3(-position.z/1,0.,0.)*(time*speed/100);\\n\\tfloat f;\\n    f  = 0.5000*noise( q ); q = q*2.02;\\n    f += 0.2500*noise( q ); q = q*2.03;\\n    f += 0.1250*noise( q ); q = q*2.01;\\n    f += 0.0625*noise( q );\\n\\n\\td += 3.0 * f;\\n\\n\\td = clamp( d, 0.0, 1.0 );\\n\\t\\n\\tvec4 res = vec4( d );\\n\\n\\tres.xyz = mix( 1.15*cloud_light, cloud_color, res.x );\\n\\t\\n\\treturn res;\\n}\\n\\n\\nvec3 sundir = vec3(sun_direction.x/resolution.x, sun_direction.y/resolution.y, sun_direction.z/2000);\\n\\n\\nvec4 raymarch( in vec3 ro, in vec3 rd )\\n{\\n\\tvec4 sum = vec4(0, 0, 0, 0);\\n\\n\\tfloat t = 0.0;\\n\\tfor(int i=0; i<int( depth); i++)\\n\\t{\\n\\t\\tif( sum.a > 0.99 ) continue;\\n\\n\\t\\tvec3 pos = ro + t*rd;\\n\\t\\tvec4 col = map( pos );\\n\\t\\t\\n\\t\\t#if 1\\n\\t\\tfloat dif =  clamp((col.w - map(pos+0.3*sundir).w)/0.6, 0.0, 1.0 );\\n        vec3 lin = vec3(0.65,0.68,0.7)*1.35 + 0.45*vec3(0.7, 0.5, 0.3)*dif;\\n\\t\\tcol.xyz *= lin;\\n\\t\\t#endif\\n\\t\\n\\t\\tcol.a *=0.35;\\n\\t\\tcol.a *=(depth-i+depth_opacity)/depth;\\n\\t\\tcol.rgb *= col.a;\\n\\n\\t\\tsum = sum + col*(1.0 - sum.a);\\t\\n\\n        #if 0\\n\\t\\tt += 0.1;\\n\\t\\t#else\\n\\t\\tt += max(0.1,0.025*t);\\n\\t\\t#endif\\n\\t}\\n\\n\\tsum.xyz /= (0.001+sum.w);\\n\\n\\treturn clamp( sum, 0.0, 1.0 );\\n}\\n\\n// Added for Action camera.  Returns a matrix that rotates about an axis \\nmat4 rot(vec3 axis, float angle) {\\n\\taxis = normalize(axis);\\n\\tfloat s = sin(angle);\\n\\tfloat c = cos(angle);\\n\\tfloat oc = 1.0 - c;\\n\\n\\treturn mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\\n\\t            oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\\n\\t            oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\\n\\t            0.0,                                0.0,                                0.0,                                1.0);\\n}\\n\\n// Added for Action camera\\nfloat deg2rad(float angle) {\\n\\treturn(angle/(180.0/pi));\\n}\\n// end Action camera\\n  \\nvoid main(void)\\n{\\n    vec2 iResolution = resolution;\\n\\tvec2 q = gl_FragCoord.xy / iResolution.xy;\\n    vec2 p = -1.0 + 2.0*q;\\n    p.y += height/100;\\n    p.x *= iResolution.x/ iResolution.y;\\n    vec2 mo = -1.0 + 2.0*paramPos.xy;\\n  \\t\\n\\n    // added for Action camera \\n   \\tvec3 ro, rd;\\n    \\n    // camera\\n    ro = 4.0*normalize(vec3(cos(2.75-3.0*mo.x),.9+(mo.y+2), sin(2.75-3.0*mo.x)));\\n\\tvec3 ta = vec3(0.0, 2., 0.0);\\n    vec3 ww = normalize( ta - ro);\\n    vec3 uu = normalize(cross( vec3(0.0,1., 0.0), ww ));\\n    vec3 vv = normalize(cross(ww,uu));\\n    rd = normalize( p.x*uu + p.y*vv+ 1.5*ww );\\n\\t\\n    vec4 res = raymarch( ro, rd );\\n\\n\\tfloat sun = clamp( dot(sundir,rd), 0.0, 1.0 );\\n\\tvec3 col = vec3(0.6,0.71,0.75) - rd.y*0.2*vec3(1.0,0.5,1.0) + 0.15*0.5;\\n\\tcol += 0.2*vec3(1.0,.6,0.1)*pow( sun, 8.0 );\\n\\tcol *= 0.95;\\n\\tcol = mix( col, res.xyz, res.w );\\n\\tcol += 0.1*vec3(1.0,0.4,0.2)*pow( sun, 3.0 );\\n\\n   fragColorOut = vec4( col, 1.0 );\\n}","gl33_vert_error": "compiled successfully","gl33_vert_sh": "#version 330 \\n in vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}"},"gui_settings": {"cboxGrp": {"grpName": "check box Group","grpVisibleB": false,"params": [{"defaultVal": [0],"name": "paramProcedural","visibleB": false},{"defaultVal": [0],"name": "cbox_2","visibleB": false},{"defaultVal": [0],"name": "cbox_3","visibleB": false},{"defaultVal": [0],"name": "cbox_4","visibleB": false},{"defaultVal": [0],"name": "cbox_5","visibleB": false},{"defaultVal": [0],"name": "cbox_6","visibleB": false},{"defaultVal": [0],"name": "cbox_7","visibleB": false},{"defaultVal": [0],"name": "cbox_8","visibleB": false},{"defaultVal": [0],"name": "cbox_9","visibleB": false},{"defaultVal": [0],"name": "cbox_10","visibleB": false}]},"colorGrp": {"grpName": "3d color Group","grpVisibleB": false,"params": [{"defaultVal": [1,0.95,0.8],"name": "cloud_light","visibleB": true},{"defaultVal": [0.7,0.7,0.7],"name": "cloud_color","visibleB": true},{"defaultVal": [1,1,1],"name": "color_3","visibleB": false},{"defaultVal": [1,1,1],"name": "color_4","visibleB": false},{"defaultVal": [1,1,1],"name": "color_5","visibleB": false},{"defaultVal": [1,1,1],"name": "color_6","visibleB": false},{"defaultVal": [1,1,1],"name": "color_7","visibleB": false},{"defaultVal": [1,1,1],"name": "color_8","visibleB": false},{"defaultVal": [1,1,1],"name": "color_9","visibleB": false},{"defaultVal": [1,1,1],"name": "color_10","visibleB": false}]},"layerGrp": {"current_layer": {"name": "texture0"},"extLayer_1": {"name": "texture1","visibleB": false},"extLayer_2": {"name": "texture2","visibleB": false},"extLayer_3": {"name": "texture3","visibleB": false},"extLayer_4": {"name": "texture4","visibleB": false},"grpName": "Layer Group","grpVisibleB": false},"pointGrp": {"grpName": "3d Point Group","grpVisibleB": true,"params": [{"defaultVal": [50,100,2],"name": "position","visibleB": true},{"defaultVal": [50,50,50],"name": "sun_direction","visibleB": true},{"defaultVal": [50,50,50],"name": "point_3","visibleB": false},{"defaultVal": [50,50,50],"name": "point_4","visibleB": false},{"defaultVal": [50,50,50],"name": "point_5","visibleB": false},{"defaultVal": [50,50,50],"name": "point_6","visibleB": false},{"defaultVal": [50,50,50],"name": "point_7","visibleB": false},{"defaultVal": [50,50,50],"name": "point_8","visibleB": false},{"defaultVal": [50,50,50],"name": "point_9","visibleB": false},{"defaultVal": [50,50,50],"name": "point_10","visibleB": false}]},"rotationGrp": {"grpName": "rotation ","grpVisibleB": false,"params": [{"defaultVal": [0],"name": "rotation_x","visibleB": false},{"defaultVal": [1],"name": "rotation_y","visibleB": false},{"defaultVal": [0],"name": "rotation_z","visibleB": false},{"defaultVal": [0],"name": "rotation_4","visibleB": false},{"defaultVal": [0],"name": "rotation_5","visibleB": false},{"defaultVal": [0],"name": "rotation_6","visibleB": false},{"defaultVal": [0],"name": "rotation_7","visibleB": false},{"defaultVal": [0],"name": "rotation_8","visibleB": false},{"defaultVal": [0],"name": "rotation_9","visibleB": false},{"defaultVal": [0],"name": "rotation_10","visibleB": false}]},"sliderGrp": {"grpName": "Slider Group","grpVisibleB": true,"params": [{"defaultVal": [10],"name": "speed","visibleB": true},{"defaultVal": [50],"name": "height","visibleB": true},{"defaultVal": [75],"name": "depth","visibleB": true},{"defaultVal": [50],"name": "depth_opacity","visibleB": true},{"defaultVal": [0],"name": "slider_5","visibleB": false},{"defaultVal": [0],"name": "slider_6","visibleB": false},{"defaultVal": [0],"name": "slider_7","visibleB": false},{"defaultVal": [0],"name": "slider_8","visibleB": false},{"defaultVal": [0],"name": "slider_9","visibleB": false},{"defaultVal": [0],"name": "slider_10","visibleB": false}]}},"math_expression": {"alphaExpr": "return inChannel;","alpha_error": "compiled successfully","blueExpr": "return inChannel;","blue_error": " compiled successfully","exprRGBModeB": true,"expr_current_channel": "inChannel","expr_pix": "pix","greenExpr": "return inChannel;","green_error": "compiled successfully","redExpr": "return inChannel;","red_error": "compiled successfully","rgbExpr": "return texture0;","rgb_error": "compiled successfully"}}