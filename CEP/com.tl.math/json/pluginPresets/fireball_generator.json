{

"composition": {


"camera_position": "camera_pos",


"camera_rotation": "camera_rotation",


"camera_target": "camera_target",


"camera_zoom": "camera_zoom",


"compResolution": "compResolution",


"frame_rate": "fps",


"layerPosition": "layerPosition",


"layerScale": "layerScale",


"resolution": "resolution",


"time_frame": "timef",


"time_sec": "timeS"

},

"effectInfo": {


"description": "fire ball generator.\\nbased on https://www.shadertoy.com/view/lsySzd\\nCreative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \\n\\nyou can controle the step evolutions.\\nif you set PI to 0, the effect can be used to generate light artefacts.",


"effectName": "tlMath",


"minimalPluginVersion": 115,


"pluginVersion": 115,


"presetName": "fire_ball",


"tags": [



"shadertoy",



" fire",



" ball",



" explosion",



" generator"


]

},

"effectMode": {


"evalModeB": false,


"expr_modeB": false,


"gl33_modeB": true

},

"flags": {


"pixelsCallExternalInputB": [



false,



false,



false,



false


],


"presetHasWideInputB": true,


"usesCameraB": false

},

"gl_expression": {


"gl33_frag_error": "compiled successfully",


"gl33_frag_sh": "\\n#version 330 // glsls version for opengl 3.3\\nuniform float num_rays;\\nuniform float iterations;\\nuniform float pi;\\nuniform float x_offset;\\nuniform float time_offset;\\nuniform bool use_comp_time;\\nuniform vec3 tint; // call the color param number 1\\n\\nuniform float timeS;\\nuniform vec2 resolution;\\n\\nin vec4 out_pos;\\nin vec2 out_uvs;\\nout vec4 fragColorOut;\\n\\n\\nfloat time = time_offset+timeS*float(use_comp_time);\\n\\n#define LEFT\\n#define DITHERING\\n\\n\\n\\n\\n\\n#define R(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\\n\\nvec3 hash( vec3 p )\\n{\\n    p = vec3( dot(p,vec3(127.1,311.7, 74.7)),\\n              dot(p,vec3(269.5,183.3,246.1)),\\n              dot(p,vec3(113.5,271.9,124.6)));\\n\\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\\n}\\n\\nfloat noise( in vec3 p )\\n{\\n    vec3 i = floor( p );\\n    vec3 f = fract( p );\\n    \\n    vec3 u = f*f*(3.0-2.0*f);\\n\\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \\n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \\n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \\n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \\n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\\n}\\nfloat fbm( vec3 p )\\n{\\n   return noise(p*.06125)*.5 + noise(p*.125)*.25 + noise(p*.25)*.125 + noise(p*.4)*.2;\\n}\\n\\nfloat rand(vec2 co)\\n{\\n   return fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nfloat Sphere( vec3 p, float r )\\n{\\n   return length(p)-r;\\n}\\n\\n//==============================================================\\n// otaviogood's noise from https://www.shadertoy.com/view/ld2SzK\\n//--------------------------------------------------------------\\n// This spiral noise works by successively adding and rotating sin waves while increasing frequency.\\n// It should work the same on all computers since it's not based on a hash function like some other noises.\\n// It can be much faster than other noise functions if you're ok with some repetition.\\nconst float nudge = 4.;    // size of perpendicular vector\\nfloat normalizer = 1.0 / sqrt(1.0 + nudge*nudge);    // pythagorean theorem on that perpendicular to maintain scale\\nfloat SpiralNoiseC(vec3 p)\\n{\\n    float n = -mod(time * 0.2,-2.); // noise amount\\n    float iter = 2.0;\\n    for (int i = 0; i < iterations; i++)\\n    {\\n        // add sin and cos scaled inverse with the frequency\\n        n += -abs(sin(p.y*iter) + cos(p.x*iter)) / iter;    // abs for a ridged look\\n        // rotate by adding perpendicular and scaling down\\n        p.xy += vec2(p.y, -p.x) * nudge;\\n        p.xy *= normalizer;\\n        // rotate on other axis\\n        p.xz += vec2(p.z, -p.x) * nudge;\\n        p.xz *= normalizer;\\n        // increase the frequency\\n        iter *=1.733733;\\n    }\\n    return n;\\n}\\n\\nfloat VolumetricExplosion(vec3 p)\\n{\\n    float final = Sphere(p,4.);\\n    final += SpiralNoiseC(p.zxy*0.4132+333.)*3.0; //1.25;\\n\\n    return final;\\n}\\n\\nfloat map(vec3 p) \\n{\\n    R(p.xz, x_offset*0.008*pi+time*0.1);\\n\\n    float VolExplosion = VolumetricExplosion(p/0.5)*0.5; // scale\\n    \\n    return VolExplosion;\\n}\\n//--------------------------------------------------------------\\n\\n// assign color to the media\\nvec3 computeColor( float density, float radius )\\n{\\n    // color based on density alone, gives impression of occlusion within\\n    // the media\\n    vec3 result = mix( vec3(1.0,0.9,0.8), vec3(0.4,0.15,0.1), density );\\n    \\n    // color added to the media\\n    vec3 colCenter = 7.*vec3(0.8,1.0,1.0);\\n    vec3 colEdge = 1.5*vec3(0.48,0.53,0.5);\\n    result *= mix( colCenter, colEdge, min( (radius+.05)/.9, 1.15 ) );\\n    \\n    return result;\\n}\\n\\nbool RaySphereIntersect(vec3 org, vec3 dir, out float near, out float far)\\n{\\n    float b = dot(dir, org);\\n    float c = dot(org, org) - 8.;\\n    float delta = b*b - c;\\n    if( delta < 0.0) \\n        return false;\\n    float deltasqrt = sqrt(delta);\\n    near = -b - deltasqrt;\\n    far = -b + deltasqrt;\\n    return far > 0.0;\\n}\\n\\n// Applies the filmic curve from John Hable's presentation\\n// More details at : http://filmicgames.com/archives/75\\nvec3 ToneMapFilmicALU(vec3 _color)\\n{\\n    _color = max(vec3(0), _color - vec3(0.004));\\n    _color = (_color * (6.2*_color + vec3(0.5))) / (_color * (6.2 * _color + vec3(1.7)) + vec3(0.06));\\n    return _color;\\n}\\n\\nvoid main( void )\\n{  \\n\\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\\n    \\n    // ro: ray origin\\n    // rd: direction of the ray\\n    vec3 rd = normalize(vec3((gl_FragCoord.xy-0.5*resolution.xy)/resolution.y, 1.0));\\n    vec3 ro = vec3(0., 0., -6.);\\n        \\n    #ifdef DITHERING\\n    vec2 seed = uv + fract(time+0.1);\\n    #endif \\n    \\n    // ld, td: local, total density \\n    // w: weighting factor\\n    float ld=0., td=0., w=0.;\\n\\n    // t: length of the ray\\n    // d: distance function\\n    float d=1., t=0.;\\n    \\n        const float h = 0.1;\\n   \\n    vec4 sum = vec4(0.0);\\n   \\n        float min_dist=0.0, max_dist=0.0;\\n\\n       if(RaySphereIntersect(ro, rd, min_dist, max_dist))\\n        {\\n       \\n    t = min_dist*step(t,min_dist);\\n   \\n    // raymarch loop\\n\\n        for (int i=0; i<(num_rays+30); i++)\\n\\n    {\\n     \\n        vec3 pos = ro + t*rd;\\n  \\n        // Loop break conditions.\\n        if(td>0.9 || d<0.12*t || t>10. || sum.a > 0.99 || t>max_dist) break;\\n        \\n        // evaluate distance function\\n        float d = map(pos);\\n        d = abs(d)+0.07;        \\n        // change this string to control density \\n        d = max(d,0.03);\\n        // point light calculations\\n        vec3 ldst = vec3(0.0)-pos;\\n        float lDist = max(length(ldst), 0.001);\\n        \\n        // the color of light \\n        vec3 lightColor=tint;\\n        \\n        sum.rgb+=(lightColor/exp(lDist*lDist*lDist*.08)/30.); // bloom\\n        \\n        if (d<h) \\n        {\\n        // compute local density \\n        ld = h - d;\\n            \\n        // compute weighting factor \\n        w = (1. - td) * ld;\\n     \\n        // accumulate density\\n        td += w + 1./200.;\\n        \\n        vec4 col = vec4( computeColor(td,lDist), td );\\n            \\n            // emission\\n            sum += sum.a * vec4(sum.rgb, 0.0) * 0.2 / lDist;    \\n            \\n        // uniform scale density\\n        col.a *= num_rays/100;\\n        // colour by alpha\\n        col.rgb *= col.a;\\n        // alpha blend in contribution\\n        sum = sum + col*(1.0 - sum.a);  \\n       \\n        }\\n      \\n        td += 1./70.;\\n        \\n        #ifdef DITHERING\\n        d=abs(d)*(.8+0.2*rand(seed*vec2(i)));\\n        #endif \\n        \\n        // trying to optimize step size\\n        t += max(d * 0.08 * max(min(length(ldst),d),2.0), 0.01);\\n\\n                \\n    }\\n    \\n    // simple scattering\\n    sum *= 1. / exp( ld * 0.2 ) * 0.8;     \\n     sum = clamp( sum, 0.0, 1.0 );\\n     sum.xyz = sum.xyz*sum.xyz*(3.0-2.0*sum.xyz);\\n    \\n    }\\n     fragColorOut = vec4(sum.xyz,1.0);\\n     fragColorOut.a = mix ( fragColorOut.r,  fragColorOut.g,  fragColorOut.b);\\n}\\n",


"gl33_vert_error": "compiled successfully",


"gl33_vert_sh": "#version 330 \\n in vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}"

},

"gui_settings": {


"cboxGrp": {



"grpName": "check box Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






0





],





"name": "use_comp_time",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_10",





"visibleB": false




}



]


},


"colorGrp": {



"grpName": "3d color Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






1,






1,






1





],





"name": "tint",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_2",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_3",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_4",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_5",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_6",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_7",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_8",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_9",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_10",





"visibleB": false




}



]


},


"layerGrp": {



"current_layer": {




"name": "texture0"



},



"extLayer_1": {




"name": "texture1",




"visibleB": false



},



"extLayer_2": {




"name": "texture2",




"visibleB": false



},



"extLayer_3": {




"name": "texture3",




"visibleB": false



},



"extLayer_4": {




"name": "texture4",




"visibleB": false



},



"grpName": "Layer Group",



"grpVisibleB": false


},


"pointGrp": {



"grpName": "3d Point Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






50,






50,






50





],





"name": "point_1",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_2",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_3",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_4",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_5",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_6",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_7",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_8",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_9",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_10",





"visibleB": false




}



]


},


"rotationGrp": {



"grpName": "rotation Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






0





],





"name": "rotation_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_10",





"visibleB": false




}



]


},


"sliderGrp": {



"grpName": "Slider Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






10





],





"name": "num_rays",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "iterations",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "pi",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "x_offset",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "time_offset",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "slider_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_10",





"visibleB": false




}



]


}

},

"math_expression": {


"alphaExpr": "return inChannel;",


"alpha_error": "compiled successfully",


"blueExpr": "return inChannel;",


"blue_error": " compiled successfully",


"exprRGBModeB": true,


"expr_current_channel": "inChannel",


"expr_pix": "pix",


"greenExpr": "return inChannel;",


"green_error": "compiled successfully",


"redExpr": "return inChannel;",


"red_error": "compiled successfully",


"rgbExpr": "return inChannel;",


"rgb_error": "compiled successfully"

}
}