{

"composition": {


"camera_position": "camera_pos",


"camera_rotation": "camera_rotation",


"camera_target": "camera_target",


"camera_zoom": "camera_zoom",


"compResolution": "compResolution",


"frame_rate": "fps",


"layerPosition": "layerPosition",


"layerScale": "layerScale",


"resolution": "resolution",


"time_frame": "timef",


"time_sec": "time"

},

"effectInfo": {


"description": "based on https://www.shadertoy.com/view/4stSRM by  SolarLiner\\n\\nCreative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\\n\\n",


"effectName": "tlMath",


"minimalPluginVersion": 115,


"pluginVersion": 115,


"presetName": "horizontal_bokeh",


"tags": [



"shadertoybokeh",



" blur",



" disort",



"horizontal"


]

},

"effectMode": {


"evalModeB": false,


"expr_modeB": false,


"gl33_modeB": true

},

"flags": {


"pixelsCallExternalInputB": [



false,



false,



false,



false


],


"presetHasWideInputB": false,


"usesCameraB": false

},

"gl_expression": {


"gl33_frag_error": "compiled successfully",


"gl33_frag_sh": "#version 330 // glsls version for opengl 3.3\\n// based on https://www.shadertoy.com/view/4stSRM by  SolarLiner\\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\\n\\nuniform sampler2D texture0; //call the layer source\\nuniform vec2 resolution;\\nuniform float intensity;\\nuniform float multiplier16bit; //proper to AE 16 bits depth.\\nuniform float main_disort;\\nuniform float sub_disort;\\nuniform float barrel_distortion;\\nuniform float iterations;\\nuniform float angle_offset;\\nuniform float contrast;\\nuniform vec3 center;\\nin vec4 out_pos;\\nin vec2 out_uvs;\\nout vec4 fragColorOut;\\n// to use instead of texture(sampler2D, vec2 uv) because of swizzle RGBA/ ARGBs\\nvec4 loadTextureFromAE (sampler2D tex2d, vec2 uv, float radius)\\n{\\n    vec2 uv_AE = uv;\\n    uv_AE.y = 1.- out_uvs.y;\\n    vec4 textureIn = texture( tex2d, uv_AE, radius);\\n    return  textureIn ;\\n}\\n\\nfloat GOLDEN_ANGLE = 2.39996323*angle_offset;\\n\\nfloat  ITERATIONS = iterations*10;\\n\\nfloat  DISTORTION_ANAMORPHIC\\t= main_disort/10;\\nfloat  DISTORTION_ANAMORPHIC_y\\t= sub_disort/10;\\nfloat DISTORTION_BARREL\\t\\t=barrel_distortion/10;\\n// Helpers-----------------------------------------------------------------------------------\\nvec2 rotate(vec2 vector, float angle)\\n{\\n    float s = sin(angle);\\n    float c = cos(angle);\\n    \\n    return vec2(c*vector.x-s*vector.y, s*vector.x+c*vector.y);\\n}\\n\\nmat2 rotMatrix(float angle)\\n{\\n    return mat2(cos(angle), sin(angle),\\n                    -sin(angle), cos(angle));\\n}\\n\\n// Additions by SolarLiner ------------------------------------------------------------------\\nvec2 GetDistOffset(vec2 uv, vec2 pxoffset)\\n{\\n    vec2 tocenter = center.xy; //uv.xy+vec2(-0.5,0.5);\\n    vec3 prep = normalize(vec3(tocenter.y, -tocenter.x, 0.0));\\n    \\n    float angle = length(tocenter.xy)*2.221*DISTORTION_BARREL;\\n    vec3 oldoffset = vec3(pxoffset,0.);\\n    float anam_x = 1.0-DISTORTION_ANAMORPHIC; // Prevents a strange syntax error\\n    float anam_y = 1.0-DISTORTION_ANAMORPHIC_y;\\n    oldoffset.x *= anam_x;\\n    oldoffset.y *= anam_y;\\n    \\n    \\n    vec3 rotated = oldoffset * cos(angle) + cross(prep, oldoffset) * sin(angle) + prep * dot(prep, oldoffset) * (1.0-cos(angle));\\n    \\n    return rotated.xy;\\n}\\n\\n//-------------------------------------------------------------------------------------------\\nvec3 Bokeh(sampler2D tex, vec2 uv, float radius, float amount)\\n{\\n\\tvec3 acc = vec3(0.0);\\n\\tvec3 div = vec3(0.0);\\n\\t\\n    vec2 tocenter = uv.xy+vec2(0.5,  -0.5);\\n    vec2 pixel =1.0/ resolution.xy;\\n    float r = 1.0;\\n    vec2 vangle = vec2(0.0,radius); // Start angle\\n    mat2 rot = rotMatrix(GOLDEN_ANGLE);\\n    \\n    amount += radius*500.0;\\n    \\n\\tfor (int j = 0; j < ITERATIONS; j++)\\n    {  \\n        r += 1. / r;\\n\\t    vangle = rot * vangle;\\n        // (r-1.0) here is the equivalent to sqrt(0, 1, 2, 3...)\\n        vec2 pos = GetDistOffset(uv, pixel*(r-1.)*vangle);\\n        \\n\\t\\tvec3 col = loadTextureFromAE(tex, uv + pos, radius*1.25).xyz;\\n\\n        col = col * contrast; // ...contrast it for better highlights - leave this out elsewhere.\\n\\t\\tvec3 bokeh = pow(col, vec3(9.0)) * amount+.4;\\n\\t\\tacc += col * bokeh;\\n\\t\\tdiv += bokeh;\\n\\t}\\n\\treturn acc / div;\\n}\\n\\n\\nvoid main(void)\\n{\\n\\n    vec2 uv =gl_FragCoord.xy / resolution.xy;\\n    uv *= vec2(1.0, -1.0);\\n    fragColorOut= vec4(Bokeh(texture0, uv, intensity/50,1.), 1.0);\\n}",


"gl33_vert_error": "compiled successfully",


"gl33_vert_sh": "#version 330 \\n in vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}"

},

"gui_settings": {


"cboxGrp": {



"grpName": "check box Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






0





],





"name": "cbox_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_10",





"visibleB": false




}



]


},


"colorGrp": {



"grpName": "3d color Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






1,






1,






1





],





"name": "color_1",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_2",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_3",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_4",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_5",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_6",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_7",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_8",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_9",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_10",





"visibleB": false




}



]


},


"layerGrp": {



"current_layer": {




"name": "texture0"



},



"extLayer_1": {




"name": "texture1",




"visibleB": false



},



"extLayer_2": {




"name": "texture2",




"visibleB": false



},



"extLayer_3": {




"name": "texture3",




"visibleB": false



},



"extLayer_4": {




"name": "texture4",




"visibleB": false



},



"grpName": "Layer Group",



"grpVisibleB": false


},


"pointGrp": {



"grpName": "3d Point Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






50,






50,






50





],





"name": "center",





"visibleB": true




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_2",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_3",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_4",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_5",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_6",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_7",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_8",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_9",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_10",





"visibleB": false




}



]


},


"rotationGrp": {



"grpName": "rotation Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






0





],





"name": "rotation_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_10",





"visibleB": false




}



]


},


"sliderGrp": {



"grpName": "Slider Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






20





],





"name": "intensity",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "angle_offset",





"visibleB": true




},




{





"defaultVal": [






6





],





"name": "main_disort",





"visibleB": true




},




{





"defaultVal": [






6





],





"name": "sub_disort",





"visibleB": true




},




{





"defaultVal": [






6





],





"name": "barrel_distortion",





"visibleB": true




},




{





"defaultVal": [






50





],





"name": "iterations",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "contrast",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "sl8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_10",





"visibleB": false




}



]


}

},

"math_expression": {


"alphaExpr": "return inChannel;",


"alpha_error": "compiled successfully",


"blueExpr": "return inChannel;",


"blue_error": " compiled successfully",


"commonExpr":  "float getLuma(vec4 text)\\n {\\n return 0.3 * text.r + 0.59 * text.g + 0.11 * text.b; \\n}\\nvec4 textureOffset(sampler2D tex2d, vec2 off) {\\nvec2 uv_AE = out_uvs;\\nuv_AE.x =textUvs.x + off.x; \\nuv_AE.y = textUvs.y + off.y; \\nvec4 textureIn = texture(tex2d, uv_AE); \\n return  textureIn; \\n}",


"common_error": "compiled successfully",


"exprRGBModeB": true,


"expr_current_channel": "inChannel",


"expr_pix": "pix",


"greenExpr": "return inChannel;",


"green_error": "compiled successfully",


"redExpr": "return inChannel;",


"red_error": "compiled successfully",


"rgbExpr": "return inChannel;",


"rgb_error": "compiled successfully"

}
}