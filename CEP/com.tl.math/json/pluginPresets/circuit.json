{

"composition": {


"camera_position": "camera_pos",


"camera_rotation": "camera_rotation",


"camera_target": "camera_target",


"camera_zoom": "camera_zoom",


"compResolution": "compResolution",


"frame_rate": "fps",


"layerPosition": "layerPosition",


"layerScale": "layerScale",


"resolution": "resolution",


"time_frame": "timef",


"time_sec": "time"

},

"effectInfo": {


"description": "generates an electric circuit with an editable background and foreground",


"effectName": "tlMath",


"minimalPluginVersion": 115,


"pluginVersion": 115,


"presetName": "eletric_circuit",


"tags": [



"generator",



" glslsandbox",



" electric",



" voronoi"


]

},

"effectMode": {


"evalModeB": false,


"expr_modeB": false,


"gl33_modeB": true

},

"flags": {


"needsLumaB": false,


"pixelsCallExternalInputB": [



false,



false,



false,



false


],


"presetHasWideInputB": true,


"usesCameraB": false

},

"gl_expression": {


"gl33_frag_error": "compiled successfully",


"gl33_frag_sh": "//shader from glslsandbox\\n// Author: Marco Gomez        | @marcogomez_ | http://mgz.me    |\\n// Sample Shader for ShaderLab    | http://shaderlab.mgz.me    |\\n#version 330\\n\\n\\nin vec4 out_pos;\\nin vec2 out_uvs;\\n\\nuniform    vec2    resolution;\\nuniform    float    time;\\nuniform    float fg_seed;\\nuniform    float bg_seed;\\nuniform    float fg_evolution;\\nuniform    float fg_light;\\nuniform    float bg_light;\\nuniform    float bg_distort;\\nuniform    float fg_size;\\nuniform float   zoom;\\n\\nuniform vec3 cl1;\\n\\nout vec4 colourOut;\\n\\n\\nfloat    rndc = bg_seed*1000;\\n\\nfloat fMix (float x, float y, float a) { return  x* (1-a) + (y*a); } //for macos error\\n\\nfloat rand (float n) { return fract(sin(n) * rndc); }\\n\\nvec2 rand2 (in vec2 p) { return fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077))); }\\n\\nfloat noiseD (float p) { float fl = floor(p), fc = fract(p); return fMix(rand(fl), rand(fl + 1.000004), fc); }\\n\\n// voronoi distance noise based on iq's articles ( http://www.iquilezles.org/www/index.htm )\\nfloat voronoi (vec2 x) {\\n    vec2 p = floor(x), f = fract(x), res = vec2(8.0);\\n    for(int j = -1; j <= 1; j ++)\\n    for(int i = -1; i <= 1; i ++) {\\n        vec2 b = vec2(i, j), r = vec2(b) - f + rand2(p + b);\\n        float d = max(abs(r.x), abs(r.y));\\n        if(d < res.x) { res.y = res.x; res.x = d; } else if(d < res.y) { res.y = d; }\\n    }\\n    return res.y - res.x;\\n}\\n\\nvoid main (void) {\\n    vec2 xy = gl_FragCoord.xy / resolution.xy;    xy = (xy - 0.5) * 3.0;\\n    vec2 xy2 = xy;\\n    xy.x *= resolution.x / resolution.y;\\n    float v = 0.0; v = 0.21 - length(xy) * 0.21;\\n   xy /= zoom/50;\\n    //xy += time * 0.12;\\n    //xy.y -= time * 0.12;\\n    float a = 0.7, f = 1.0;\\n    for(int i = 0; i < int(fg_light); i ++) {\\n        float v1 = voronoi(xy * f + bg_seed);\\n        float v2 = 0.0;\\n        if(i > 0) {\\n            float va = 0.0, vb = 0.0;\\n            if (i == 1) {\\n                va = 1.0 - smoothstep(0.0, 0.2, v1);\\n                v2 = voronoi(xy * f * 0.5 / 5.0 + 8694.0 +  fg_evolution -10 * 0.125);\\n                vb = 1.0 - smoothstep(0.0, 0.1, v2);\\n            } else {\\n                va = 1.0 - smoothstep(0.0, 0.1, v1);\\n                v2 = voronoi(xy * f * 0.5 + 50.0  + fg_evolution );\\n                vb = 1.0 - smoothstep(0.0, 0.08, v2);\\n            }\\n            v += a * pow(va * (2.915 *vb), fg_light/10);\\n        }\\n        v1 = 1.0 - smoothstep(bg_distort/100, .2, v1);\\n        v2 =    fMix (0.12, a * (noiseD(v1 * 7.5 + 0.3)), bg_light/100);\\n        if(i == 0) { v += v2; }\\n        f *= 3.0*fg_size;\\n        a *=  fg_light/105;\\n    }\\n    v *= exp(-0.6 * length(xy2)) * 1.2;\\n    vec3 cexp = 0.2+(vec3(1)-cl1); //vec3(4.0, 1.5, 1.2);\\n    cexp *= 6.012;\\n    //vec3 col = cl1*v*4.0;\\n    vec3 col = vec3(pow(v, cexp.x), pow(v, cexp.y), pow(v, cexp.z)) * 4.0;\\n    colourOut= vec4(col, 1.0);\\n}",


"gl33_vert_error": "compiled successfully",


"gl33_vert_sh": "#version 330 \\n in vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}"

},

"gui_settings": {


"cboxGrp": {



"grpName": "check box Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






0





],





"name": "cbox_1",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_2",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_3",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_4",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_5",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_6",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_7",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_8",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_9",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_10",





"visibleB": true




}



]


},


"colorGrp": {



"grpName": "3d color Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






1,






1,






1





],





"name": "cl1",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_2",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_3",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_4",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_5",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_6",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_7",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_8",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_9",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_10",





"visibleB": true




}



]


},


"layerGrp": {



"current_layer": {




"name": "texture0"



},



"extLayer_1": {




"name": "texture1",




"poffName": "layer1_position_off",




"toffName": "layer1_time_off",




"visibleB": false



},



"extLayer_2": {




"name": "texture2",




"poffName": "layer2_position_off",




"toffName": "layer2_time_off",




"visibleB": false



},



"extLayer_3": {




"name": "texture3",




"poffName": "layer3_position_off",




"toffName": "layer3_time_off",




"visibleB": false



},



"extLayer_4": {




"name": "texture4",




"poffName": "layer4_position_off",




"toffName": "layer4_time_off",




"visibleB": false



},



"grpName": "Layer Group",



"grpVisibleB": false


},


"pointGrp": {



"grpName": "3d Point Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






50,






50,






50





],





"name": "center",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_2",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_3",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_4",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_5",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_6",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_7",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_8",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_9",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_10",





"visibleB": false




}



]


},


"rotationGrp": {



"grpName": "rotation Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






0





],





"name": "rotation_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_10",





"visibleB": false




}



]


},


"sliderGrp": {



"grpName": "Slider Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






10





],





"name": "fg_seed",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "bg_seed",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "bg_light",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "fg_light",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "fg_evolution",





"visibleB": true




},




{





"defaultVal": [






15





],





"name": "zoom",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "fg_size",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "bg_distort",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_10",





"visibleB": false




}



]


}

},

"math_expression": {


"alphaExpr": "return inChannel;",


"alpha_error": "compiled successfully",


"blueExpr": "return inChannel;",


"blue_error": " compiled successfully",


"commonExpr": "float getLuma(vec4 text)\\n {\\n return 0.3 * text.r + 0.59 * text.g + 0.11 * text.b; \\n}\\nvec4 textureOffset(sampler2D tex2d, vec2 off) {\\nvec2 uv_AE = out_uvs;\\nuv_AE.x =textUvs.x + off.x; \\nuv_AE.y = textUvs.y + off.y; \\nvec4 textureIn = texture(tex2d, uv_AE); \\n return  textureIn; \\n}",


"common_error": "compiled successfully",


"exprRGBModeB": true,


"expr_current_channel": "inChannel",


"expr_pix": "pix",


"expr_rgb_channel": "inputRgb",


"greenExpr": "return inChannel;",


"green_error": "compiled successfully",


"redExpr": "return inChannel;",


"red_error": "compiled successfully",


"rgbExpr": "    vec3 result;\\n    //in this mode the channel0 texture is automatically a rgb channel\\n    vec3 premix =mix (inputRgb,color_1, slider_1/100); //let's make a simple mix with color 1 influence by a slider\\n    //note we wrote vec4(color_1, 1.0). becaufe we have to mix a four color channel so we add a full alpha\\n    if (cbox_1){ // if the checkbox is activated\\n        // we import the layer1 ith an offset ith point1.\\n        \\n        // an offset has to be nromalized: (1,1) =(the layer x size normalized, the layer y scale normalized)\\n        // so an offset to stay in the picture has to be defined wetween 0 and 1\\n        // lets start with resolution/2 get the center. (for ex in fullhd wi get center (960/540)\\n        //if we substract the point coord we get the off value\\n        // 0 if the point is in the center. to get a normalized value to the layer we divide by the resoluton \\n        vec2 off;\\n        //gl_FragCoord returns the coordonate of the current pixel.\\n        off.x =textUvs.x +( resolution.x/2 -point_1.x)/resolution.x;\\n        off.y =textUvs.y -( resolution.y/2 -point_1.y)/resolution.y;\\n        vec4 textureLayer = texture (texture1,off );\\n        result = mix (inputRgb,textureLayer.rgb, slider_1/100); //let's do some mix with a slider\\n    }else{\\n         result =premix; // if checkbox not selected return premix\\n\\n    }\\n    return result;",


"rgb_error": "compiled successfully"

}
}