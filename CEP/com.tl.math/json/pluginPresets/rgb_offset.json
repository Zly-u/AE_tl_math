{

"composition": {


"camera_position": "camera_pos",


"camera_rotation": "camera_rotation",


"camera_target": "camera_target",


"camera_zoom": "camera_zoom",


"compResolution": "compResolution",


"frame_rate": "fps",


"layerPosition": "layerPosition",


"layerScale": "layerScale",


"resolution": "resolution",


"time_frame": "timef",


"time_sec": "time"

},

"effectInfo": {


"description": "This example explains how to load textures and calculate the offset.",


"effectName": "tlMath",


"minimalPluginVersion": 115,


"pluginVersion": 115,


"presetName": "rgb_offset",


"tags": [



"expression",



"basic",



"tuto",



" offset",



" color"


]

},

"effectMode": {


"evalModeB": false,


"expr_modeB": true,


"gl33_modeB": false

},

"flags": {


"pixelsCallExternalInputB": [



false,



false,



false,



false


],


"presetHasWideInputB": false,


"usesCameraB": false

},

"gl_expression": {


"gl33_frag_error": "compiled successfully",


"gl33_frag_sh": "\\n//EXEMPE TO SHOW HOW THE PLUGIN WORKS\\n//A SHADER MUST START ITH A DEFINITION OF THE GLSL VERSION USED\\n// FOR NOW THE PLUGIN WORKS ONLY ITH 330 (for opengl 3.3)\\n// the same effect is written in expression rgb mode. \\n#version 330 \\n// let's call variables from After Effect\\n// THE PROCES IS uniform [TYPE] [variableName];\\n//uniform--> the function to call an external element in glsl\\n//type--> sampler2D for a texture from AE\\n// ------ float for a single dimention (time, slider or rotation param)\\n//-------- vec2  for a two dimension item (resolution)\\n//--------vec3 for a three dimension item (points/ color)\\n//--------bool  for checkbox\\n// Points are alayws defined as vec3 with this plugin. So if you have \\n// a shader with a 2D point, you can convert it latter.\\n// Slider are alays imported as float. if you want an integer you can convert\\n//on the fly: int(sliderName) \\n//variable Name: you define it in param setting.\\n//for the exemple we keep the default name\\nuniform sampler2D texture0; //get the layer source\\nuniform sampler2D texture1; // get an other layer\\nuniform float slider_1;// get  a slider from the UI\\nuniform vec3 point_1; // get  a pioint from the UI\\nuniform bool cbox_1; // get  a checkbox from the UI\\nuniform vec3 color_1; //get a color input\\nuniform vec2 resolution; //get  the resolution\\nin vec2 out_uvs; // get the uv (1,1) size of the layer\\n //invert texture for AE on y corrd. it's faster in glsl\\n  vec2 textUvs =vec2 (out_uvs.x, 1- out_uvs.y);\\nout vec4 fragColorOut; // the output varaible\\n// in glsl you can use gl_FragColorOut for the output but\\n// on some version of macos we have to define an out vec4 variable.\\n//if you develop on pc and want to share shaders, don't forget mac users...\\n// you can give it the name you want \\n\\n\\n// void main is the main part of the glsl program.\\n//here you make the main work of the effect.\\nvoid main(void)\\n{\\n    vec4 textureInput = texture(texture0,textUvs); // call the orginal  layer with the orginal position\\n    vec4 premix =mix (textureInput,vec4(color_1, 1.0), slider_1/100); //let's make a simple mix with color 1 influence by a slider\\n    //note we wrote vec4(color_1, 1.0). becaufe we have to mix a four color channel so we add a full alpha\\n    if (cbox_1){ // if the checkbox is activated\\n        // we import the layer1 ith an offset ith point1.\\n        \\n        // an offset has to be nromalized: (1,1) =(the layer x size normalized, the layer y scale normalized)\\n        // so an offset to stay in the picture has to be defined wetween 0 and 1\\n        // lets start with resolution/2 get the center. (for ex in fullhd wi get center (960/540)\\n        //if we substract the point coord we get the off value\\n        // 0 if the point is in the center. to get a normalized value to the layer we divide by the resoluton \\n        vec2 off;\\n        off.x =textUvs.x +( resolution.x/2 -point_1.x)/resolution.x;\\n        off.y =textUvs.y -( resolution.y/2 -point_1.y)/resolution.y;\\n        vec4 textureLayer = texture (texture1,off );\\n        fragColorOut = mix (textureInput,textureLayer, slider_1/100); //let's do some mix with a slider\\n    }else{\\n         fragColorOut =premix; // if checkbox not selected return premix\\n\\n    }\\n             //if you want to play with pixel coordonate activate the alpha ramp\\n         //alpha ramp \\n         //fragColorOut.a = gl_FragCoord.x/resolution.x;\\n}\\n\\n\\n\\n",


"gl33_vert_error": "compiled successfully",


"gl33_vert_sh": "#version 330 \\nin vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}\\n"

},

"gui_settings": {


"cboxGrp": {



"grpName": "check box Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






1





],





"name": "cbox_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_10",





"visibleB": false




}



]


},


"colorGrp": {



"grpName": "3d color Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






1,






1,






1





],





"name": "color_1",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_2",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_3",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_4",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_5",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_6",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_7",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_8",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_9",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_10",





"visibleB": false




}



]


},


"layerGrp": {



"current_layer": {




"name": "texture0"



},



"extLayer_1": {




"name": "texture1",




"visibleB": false



},



"extLayer_2": {




"name": "texture2",




"visibleB": false



},



"extLayer_3": {




"name": "texture3",




"visibleB": false



},



"extLayer_4": {




"name": "texture4",




"visibleB": false



},



"grpName": "Layer Group",



"grpVisibleB": false


},


"pointGrp": {



"grpName": "3d Point Group",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






50,






50,






50





],





"name": "red_offset",





"visibleB": true




},




{





"defaultVal": [






50,






50,






50





],





"name": "green_offset",





"visibleB": true




},




{





"defaultVal": [






50,






50,






50





],





"name": "blue_offset",





"visibleB": true




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_4",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_5",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_6",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_7",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_8",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_9",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_10",





"visibleB": false




}



]


},


"rotationGrp": {



"grpName": "rotation Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






0





],





"name": "rotation_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_10",





"visibleB": false




}



]


},


"sliderGrp": {



"grpName": "Slider Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






50





],





"name": "slider_1",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "slider_10",





"visibleB": false




}



]


}

},

"math_expression": {


"alphaExpr": "return inChannel; //we keep the original alpha",


"alpha_error": "compiled successfully",


"blueExpr": "vec2 off =getOff(blue_offset.xy, resolution.xy); \\nfloat result = texture(texture0, textUvs+off).b;//let's load the the texture with offset\\nreturn result;",


"blue_error": "compiled successfully",


"commonExpr": "//the useful function for th preset.\\n//we calculate the offset to load the texture for each channels\\n//when you load a texture, yo call the sampler2d source and uv coordonate\\n//UV are expected in normalized values that is to say between 0 and 1.\\n// but after effects send pixel coordonates.\\n// for exemple in HD at the center of the screen AE send to glsl (960, 540);\\n//and we want it to be vec2(0.5, 0.5)\\n// let's just divied the offset coordonates by the resolution in pixel.\\n// vec2 offset_normalized = offset/resolution;\\n// we devied a vec2 by a vec2 so no convertion needed\\n\\n//be know we want to define the center of the frame as the reference\\n//that mean if the point is in the center of the frame, nothing move.\\n// if it's displaced on the left the image is on left etcetc\\n\\n\\n//let's devived the resolution/2 and substract the offset coordonate and tadaaa...\\n//but don't// forget to devided all by the resolution to be normalized\\n \\nvec2 getOff (vec2 off, vec2 res){\\n    return (res*0.5 - vec2(off.x, res.y-off.y))/res;\\n    \\n}\\n\\n//look ay  vec2(off.x, res.y-off.y)\\n// why x is only the offset but y has an interacton with resolution?\\n//because in opengl (0,0) coord is on the left side DOWN of the frame butin \\n//AE it's on the left UP side. so we have to do the convetion when loading texture",


"common_error": "compiled successfully",


"exprRGBModeB": false,


"expr_current_channel": "inChannel",


"expr_pix": "pix",


"expr_rgb_channel": "inputRgb",


"greenExpr": "vec2 off =getOff(green_offset.xy, resolution.xy); \\nfloat result = texture(texture0, textUvs+off).g;//let's load the the texture with offset\\nreturn result;",


"green_error": "compiled successfully",


"redExpr": "vec2 off =getOff(red_offset.xy, resolution.xy); //defined in common part\\nfloat result = texture(texture0, textUvs+off).r; //let's load the the texture with offset\\nreturn result;//texture0 is the source layer of the effet. but you can call it as you want",


"red_error": "compiled successfully",


"rgbExpr": "    vec3 result;\\n    //in this mode the channel0 texture is automatically a rgb channel\\n    vec3 premix =mix (inputRgb,color_1, slider_1/100); //let's make a simple mix with color 1 influence by a slider\\n    //note we wrote vec4(color_1, 1.0). becaufe we have to mix a four color channel so we add a full alpha\\n    if (cbox_1){ // if the checkbox is activated\\n        // we import the layer1 ith an offset ith point1.\\n        \\n        // an offset has to be nromalized: (1,1) =(the layer x size normalized, the layer y scale normalized)\\n        // so an offset to stay in the picture has to be defined wetween 0 and 1\\n        // lets start with resolution/2 get the center. (for ex in fullhd wi get center (960/540)\\n        //if we substract the point coord we get the off value\\n        // 0 if the point is in the center. to get a normalized value to the layer we divide by the resoluton \\n        vec2 off;\\n        //gl_FragCoord returns the coordonate of the current pixel.\\n        off.x =textUvs.x +( resolution.x/2 -point_1.x)/resolution.x;\\n        off.y =textUvs.y -( resolution.y/2 -point_1.y)/resolution.y;\\n        vec4 textureLayer = texture (texture1,off );\\n        result = mix (inputRgb,textureLayer.rgb, slider_1/100); //let's do some mix with a slider\\n    }else{\\n         result =premix; // if checkbox not selected return premix\\n\\n    }\\n    return result;",


"rgb_error": "compiled successfully"

}
}