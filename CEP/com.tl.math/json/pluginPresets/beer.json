{

"composition": {


"camera_position": "camera_pos",


"camera_rotation": "camera_rotation",


"camera_target": "camera_target",


"camera_zoom": "camera_zoom",


"compResolution": "compResolution",


"frame_rate": "fps",


"layerPosition": "layerPosition",


"layerScale": "layerScale",


"resolution": "resolution",


"time_frame": "timef",


"time_sec": "time"

},

"effectInfo": {


"description": "beer particule effet\\nbased on http://glslsandbox.com/e#15616\\nand flame matchbox adaptation https://logik-matchbook.org/shader/crok_beer\\n\\nGenerates a  beer texture by default, bu can be transform to other  liquid with gaz or light effects.\\n\\n",


"effectName": "tlMath",


"minimalPluginVersion": 115,


"pluginVersion": 115,


"presetName": "beer_generator",


"tags": [



"particules",



" beer",



" generator",



" glslsandbox",

""


]

},

"effectMode": {


"evalModeB": false,


"expr_modeB": false,


"gl33_modeB": true

},

"flags": {


"pixelsCallExternalInputB": [



true,



false,



false,



false


],


"presetHasWideInputB": true,


"usesCameraB": false

},

"gl_expression": {


"gl33_frag_error": "compiled successfully",


"gl33_frag_sh": "#version 330 // glsls version for opengl 3.3\\n\\nin vec4 out_pos;\\nin vec2 out_uvs;\\nout vec4 fragColorOut;\\n\\nuniform float time;\\nuniform vec2 resolution;\\nuniform sampler2D u_texture;\\n\\n\\n\\nuniform float sphere_ietrations; // planet size\\nuniform float depth; // distance for glow and distortion\\nuniform float perturb; // distortion amount of the flow around the planet\\nuniform float glow; // glow amount, mainly on hit side\\nuniform  float step_size; \\nuniform  float brightness;\\nuniform  float fade_distance; //fade by distance\\nuniform float wind_speed_x;\\nuniform float wind_speed_y;\\nuniform float wind_speed_z;\\nuniform vec3 tint;\\nuniform bool alpha;\\n\\n\\nfloat dist = depth/10;\\nfloat fade = fade_distance/1000;\\nfloat windspeed_x= wind_speed_x/10;\\nfloat windspeed_y= wind_speed_y/10;\\nfloat windspeed_z= wind_speed_z/10;\\nfloat stepsize = step_size/100;\\nfloat glowF = glow/10;\\n\\n\\n// const params\\nconst float displacement=1.0; // hot air effect// speed of wind flow\\nconst float steps=15.3; // number of steps for the volumetric rendering\\nconst int iterations=9; \\nconst float fractparam=0.9;\\nconst vec3 offset=vec3(20.54,142.,-1.55);\\n\\n\\n// to use instead of texture(sampler2D, vec2 uv) because of swizzle RGBA/ ARGBs\\n\\n\\n\\n\\nfloat wind(vec3 p) {\\n    float sphereS =sphere_ietrations/10;\\n\\tfloat d=max(0.,dist-max(0.,length(p)-sphereS)/sphereS)/dist; // for distortion and glow area\\n\\tfloat x=max(0.2,p.x*2.); // to increase glow on left side\\n\\tp.y*=1.+max(0.,-p.x-(sphereS)*.25)*1.5; // left side distortion (cheesy)\\n\\tp-=d*normalize(p)*perturb; // spheric distortion of flow\\n\\tp+=vec3(time*windspeed_x,time*windspeed_y,time*windspeed_z); // flow movement\\n\\tp=abs(fract((p+offset)*.1)-.5); // tile folding \\n\\tfor (int i=0; i<iterations; i++) {  \\n\\t\\tp=abs(p)/dot(p,p)-fractparam; // the magic formula for the hot flow\\n\\t}\\n\\treturn length(p)*(1.2+d*glowF*x)+d*glowF*x; // return the result with glow applied\\n}\\n\\nvoid main(void)\\n{\\n\\t// invert UV for AE\\n\\n\\tvec2 uv = 0.33 * ( 2.0 * gl_FragCoord.xy - resolution.xy ) / (0.5 * (resolution.x + resolution.y));\\n\\tvec3 dir=vec3(uv,1.);\\n\\tdir.x*=resolution.x/resolution.y;\\n\\tvec3 from=vec3(0.,0.,-2.+texture(u_texture,uv*.5+time).x*stepsize); //from+dither\\n\\t// volumetric rendering\\n\\tfloat v=0., l=-0.0001, t=time*windspeed_x*.2;\\n    vec3 p;\\n    float tx;\\n\\tfor (float r=10.;r<steps;r++) {\\n\\t\\tp=from+r*dir*stepsize;\\n\\t\\t//tx=loadTextureFromAE_UV(u_texture,uv*.2+vec2(t,0.)).x*displacement; // hot air effect\\n\\t\\t\\n        v+=min(50.,wind(p))*max(0.,1.-r*fade); \\n\\t}\\n\\t\\n    v/=steps; v*=brightness/50; // average values and apply bright factor\\n\\tvec3 col=vec3(v*tint.r,v*tint.g,v*tint.b);\\n    col *= (0.75-length(sqrt(3.0 * uv*uv)));\\n\\tcol *= length(col) * 50.0;\\n    float alphaF = 1.0;\\n    if (alpha){\\n        float mc =max(col.r, max(col.g, col.b));\\n        if (mc>0.5){\\n            alphaF =1.0;\\n        }else if(mc>0 && mc<0.5){\\n            alphaF = mc;\\n            }\\n        else {\\n            alphaF =0.;\\n        }\\n    }\\n\\tfragColorOut = vec4(col,alphaF);\\n}\\n",


"gl33_vert_error": "compiled successfully",


"gl33_vert_sh": "#version 330 \\n in vec4 Position;\\nin vec2 UVs;\\nout vec4 out_pos;\\nout vec2 out_uvs;\\nuniform mat4 ModelviewProjection;\\nvoid main(void)\\n{\\nout_pos = ModelviewProjection * Position; \\n gl_Position = out_pos; \\nout_uvs = UVs;\\n}"

},

"gui_settings": {


"cboxGrp": {



"grpName": "alphaMode",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






0





],





"name": "alpha",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "cbox_2",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_3",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "cbox_10",





"visibleB": false




}



]


},


"colorGrp": {



"grpName": "tint",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






1,






1,






1





],





"name": "color",





"visibleB": false




},




{





"defaultVal": [






0.8,






0.35,






0.1





],





"name": "tint",





"visibleB": true




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_3",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_4",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_5",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_6",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_7",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_8",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_9",





"visibleB": false




},




{





"defaultVal": [






1,






1,






1





],





"name": "color_10",





"visibleB": false




}



]


},


"layerGrp": {



"current_layer": {




"name": "texture0"



},



"extLayer_1": {




"name": "u_texture",




"visibleB": true



},



"extLayer_2": {




"name": "texture2",




"visibleB": false



},



"extLayer_3": {




"name": "texture3",




"visibleB": false



},



"extLayer_4": {




"name": "texture4",




"visibleB": false



},



"grpName": "additional texture",



"grpVisibleB": true


},


"pointGrp": {



"grpName": "3d Point Group",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






50,






50,






50





],





"name": "center",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_2",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_3",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_4",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_5",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_6",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_7",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_8",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_9",





"visibleB": false




},




{





"defaultVal": [






50,






50,






50





],





"name": "point_10",





"visibleB": false




}



]


},


"rotationGrp": {



"grpName": "speed",



"grpVisibleB": false,



"params": [




{





"defaultVal": [






10





],





"name": "speed_x",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "speed_y",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "speed_z",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_4",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_5",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_6",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_7",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_8",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_9",





"visibleB": false




},




{





"defaultVal": [






0





],





"name": "rotation_10",





"visibleB": false




}



]


},


"sliderGrp": {



"grpName": "fractal settings",



"grpVisibleB": true,



"params": [




{





"defaultVal": [






10





],





"name": "sphere_ietrations",





"visibleB": true




},




{





"defaultVal": [






13





],





"name": "depth",





"visibleB": true




},




{





"defaultVal": [






50





],





"name": "perturb",





"visibleB": true




},




{





"defaultVal": [






7





],





"name": "step_size",





"visibleB": true




},




{





"defaultVal": [






50





],





"name": "brightness",





"visibleB": true




},




{





"defaultVal": [






50





],





"name": "fade_distance",





"visibleB": true




},




{





"defaultVal": [






10





],





"name": "glow",





"visibleB": true




},




{





"defaultVal": [






1





],





"name": "wind_speed_x",





"visibleB": true




},




{





"defaultVal": [






9





],





"name": "wind_speed_y",





"visibleB": true




},




{





"defaultVal": [






0





],





"name": "wind_speed_z",





"visibleB": true




}



]


}

},

"math_expression": {


"alphaExpr": "return inChannel;",


"alpha_error": "compiled successfully",


"blueExpr": "return inChannel;",


"blue_error": " compiled successfully",


"commonExpr":  "float getLuma(vec4 text)\\n {\\n return 0.3 * text.r + 0.59 * text.g + 0.11 * text.b; \\n}\\nvec4 textureOffset(sampler2D tex2d, vec2 off) {\\nvec2 uv_AE = out_uvs;\\nuv_AE.x =textUvs.x + off.x; \\nuv_AE.y = textUvs.y + off.y; \\nvec4 textureIn = texture(tex2d, uv_AE); \\n return  textureIn; \\n}",


"common_error": "compiled successfully",


"exprRGBModeB": true,


"expr_current_channel": "inChannel",


"expr_pix": "pix",


"greenExpr": "return inChannel;",


"green_error": "compiled successfully",


"redExpr": "return inChannel;",


"red_error": "compiled successfully",


"rgbExpr": "return inChannel;",


"rgb_error": "compiled successfully"

}
}